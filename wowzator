#!/usr/bin/python3

import httpx
import xmltodict
import json

class WztrVhost():
    name = ""
    href = ""
    connectingPort = ""
    connectingIPAddress = ""
    connectingSSLEnable = False
    
    
    def __str__(self):
        return self.name
    def __repr__(self):
        return str(self)
    
class WztrMachine():
    __vhosts = None
    
    name=""
    address=""
    user=""
    pw=""
    use_https=False
    
    def __init__(self, name, address, user, pw, port=None):
        self.name=name
        self.address=address
        self.user=user
        self.pw=pw
        
        if port is not None:
            self.port=port
        else:
            self.port="8087"

    def __str__(self):
        return " %-10s (%s)" % (self.name, self.address)
    
    
    def __fetch(self, url):
        try:
            base_url="http://"
            if self.use_https:
                base_url="https://"
            
            base_url += self.address
            url = "%s:%s%s" % (base_url, self.port, url) 
            
            response = httpx.get(
                url,
                auth=httpx.DigestAuth(
                    self.user, self.pw
                ),
                timeout=httpx.Timeout(timeout=5)
            )
            
            return response.text

        except httpx.exceptions.ConnectTimeout:
            print('timeout getting %s on machine %s' % (url, self))
            return False
        except Exception as e:
            print('error getting %s on machine %s' % (url, self))
            print(e)
            return False
        
    def __fetchJson(self, url):
        xmlresponse = self.__fetch(url)
        
        jsonresponse = xmltodict.parse(
            xmlresponse,
            dict_constructor=dict,
            xml_attribs=True,
            force_list=('VHosts', 'VHost', 'Application', 'ApplicationInstance', 'Stream', 'MachineMonitorRequest')
        )
        
        return jsonresponse
            
            
    
    def vhosts(self):
        # lazy-fetch vhosts
        if self.__vhosts is None:
            self.__vhosts={}
            vhosts = (self.__fetchJson("/v2/servers/_defaultServer_/vhosts"))
            if 'VHosts' in vhosts.keys():
                for vhost_entry in vhosts['VHosts']:
                    vhost = vhost_entry['Vhost']
                    newvh = WztrVhost()
                    newvh.name = vhost['@id']
                    newvh.href = vhost['@href']
                    newvh.connectingIPAddress = vhost['@connectingIPAddress']
                    newvh.connectingPort = vhost['@connectingPort']
                    newvh.connectingSSLEnable = vhost['@connectingSSLEnable']
                    
                    self.__vhosts[newvh.name] = newvh

        return self.__vhosts









from cmd import Cmd
import json, sys

_CONFIGFILE="config.json"





class WztrPrompt(Cmd):
    prompt = 'wowzator> '
    intro = "\nWowzator: a simple Wowza Configuration Manager by Top-IX\nType ? to list commands\n"

    
    
    
    
    syntax_tree = {
        "$$MACHINENAME$$": {
            "vhosts": {
                "$$VHOSTNAME$$": {
                    "apps": {
                        "$$APPNAME$$": None
                    }
                }
            }
        }
    }
    syntax_placeholders = ["$$MACHINENAME$$", "$$VHOSTNAME$$", "$$APPNAME$$"]
    
    
    def __init__(self):
        print("initializing...")
        Cmd.__init__(self)
        
        self.machines = {}
        
        try:
            with open(_CONFIGFILE) as json_file:
                machines_config = json.load(json_file)
        
                for machine_config in machines_config:
                    machine=WztrMachine(name=machine_config["name"], address=machine_config["address"], user=machine_config["user"], pw=machine_config["pw"])
                    self.machines[machine.name]=machine
            

        except Exception as e:
            print(e)
            print("Cannot open %s" % _CONFIGFILE)
            sys.exit(-1)
    
    def do_exit(self, inp):
        print('Bye')
        return True
    
    do_EOF=do_exit

    def do_ls(self, inp):
        ls_path_arr = inp.split("/")
        self.__list(ls_path_arr)
        '''
                    print("Machines:")
                    for machinename in self.machines.keys():
                        machine=self.machines[machinename]
                        print(" %s" % machine)
        '''
                    

    def __list(self, path_arr):
        if len(path_arr) == 0 or path_arr[0] == "":
            return self.__list_level(0)
        else:
            return self.__list_level(len(path_arr))

    def __list_level(self, level):
        cur_l = 0
        while cur_l <= level:
            print (cur_l)
            cur_l += 1
    
    def complete_ls(self, text, line, begidx, endidx):
        
        return [i for i in self.machines.keys() if i.startswith(text)]
        
    def help_ls(self):
        print("List items and configurations")
        
    def do_refresh(self, inp):
        for machinename in self.machines.keys():
            machine=self.machines[machinename]
            machine.__vhosts = None
    def help_refresh(self):
        print("refresh info from servers")




p=WztrPrompt()
p.cmdloop()






    
    
